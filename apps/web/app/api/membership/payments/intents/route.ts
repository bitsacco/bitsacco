import { NextRequest, NextResponse } from "next/server";
import { createAuthenticatedApiClient } from "@/lib/api-helper";
import type { CreatePaymentIntentRequest } from "@bitsacco/core";
import { PaymentMethod } from "@bitsacco/core";

export async function POST(req: NextRequest) {
  try {
    const { client, session } = await createAuthenticatedApiClient();

    if (!client || !session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const body = await req.json();
    const { amount, currency, method, details, description, metadata } = body;

    // Validate required fields
    if (!amount || !currency || !method || !details) {
      return NextResponse.json(
        {
          error:
            "Missing required fields: amount, currency, method, and details are required",
        },
        { status: 400 },
      );
    }

    // Validate amount
    if (typeof amount !== "number" || amount <= 0) {
      return NextResponse.json(
        { error: "Amount must be a positive number" },
        { status: 400 },
      );
    }

    // Validate currency (basic check for 3-letter currency code)
    if (typeof currency !== "string" || !/^[A-Z]{3}$/.test(currency)) {
      return NextResponse.json(
        {
          error:
            "Currency must be a valid 3-letter currency code (e.g., USD, KES)",
        },
        { status: 400 },
      );
    }

    // Validate payment method
    const validMethods = [
      PaymentMethod.MPESA,
      PaymentMethod.LIGHTNING,
      PaymentMethod.BANK_TRANSFER,
      PaymentMethod.CARD,
    ];
    if (!validMethods.includes(method)) {
      return NextResponse.json(
        {
          error: `Invalid payment method. Must be one of: ${validMethods.join(", ")}`,
        },
        { status: 400 },
      );
    }

    // Validate payment details based on method
    const validationError = validatePaymentDetails(method, details);
    if (validationError) {
      return NextResponse.json({ error: validationError }, { status: 400 });
    }

    const request: CreatePaymentIntentRequest = {
      amount,
      currency: currency.toUpperCase(),
      method,
      details,
      description,
      metadata: {
        ...metadata,
        userId: session.user.id,
        createdVia: "nextjs-api",
      },
    };

    console.log(
      `[PAYMENT-INTENT] Creating payment intent for user ${session.user.id}`,
      {
        amount,
        currency,
        method,
        description,
      },
    );

    // Call the membership client's create payment intent method
    const response = await client.membership.createPaymentIntent(request);

    console.log(`[PAYMENT-INTENT] Successfully created payment intent`);

    return NextResponse.json(response);
  } catch (error) {
    console.error("Failed to create payment intent:", error);
    return NextResponse.json(
      { error: "Failed to create payment intent" },
      { status: 500 },
    );
  }
}

/**
 * Validate payment details based on payment method
 */
function validatePaymentDetails(
  method: PaymentMethod,
  details: Record<string, unknown>,
): string | null {
  switch (method) {
    case PaymentMethod.MPESA:
      if (!details.phone) {
        return "Phone number is required for M-Pesa payments";
      }
      // Basic phone number validation (Kenyan format)
      if (!/^\+254\d{9}$|^254\d{9}$|^0\d{9}$/.test(String(details.phone))) {
        return "Invalid phone number format for M-Pesa. Use format: +254XXXXXXXXX";
      }
      break;

    case PaymentMethod.LIGHTNING:
      // Lightning payments might not require upfront details
      // The invoice will be generated by the backend
      break;

    case PaymentMethod.BANK_TRANSFER:
      if (!details.accountNumber || !details.bankCode) {
        return "Account number and bank code are required for bank transfers";
      }
      if (
        typeof details.accountNumber !== "string" ||
        details.accountNumber.length < 8
      ) {
        return "Invalid account number format";
      }
      if (typeof details.bankCode !== "string" || details.bankCode.length < 3) {
        return "Invalid bank code format";
      }
      break;

    case PaymentMethod.CARD:
      // Card payment details are typically handled by payment processors
      // We might just need to validate the presence of certain fields
      break;

    default:
      return `Unsupported payment method: ${method}`;
  }

  return null;
}
